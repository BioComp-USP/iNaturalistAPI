swagger: "2.0"
info:
  title: iNaturalist API
  description: |
    # http://api.inaturalist.org/v1/

    Alpha version API supporting searching and returning core data,
    as well as map tile generation, for http://www.inaturalist.org/. 

    [iNaturalist](http://www.inaturalist.org/) is an global community of
    naturalists, scientists, and members of the public sharing over a million
    wildlife sightings to teach one another about the natural world while
    creating high quality citizen science data for science and conservation.
    The iNaturalist technology infrastructure and open source software is
    administered by the
    [California Academy of Sciences](http://www.calacademy.org/) as
    part of their mission to explore, explain, and sustain life on Earth.

    These API methods are all read-only methods returning data in
    JSON/JSONP and PNG response formats. They are meant to supplement the
    existing [iNaturalist API](http://www.inaturalist.org/pages/api+reference),
    implemented in Ruby on Rails, which had read and write methods, and which is
    the foundation for iNaturalist mobile apps. Visit our
    [developers page](http://www.inaturalist.org/pages/developers) for more
    information.

    Map tiles are generated using the
    [node-mapnik](https://github.com/mapnik/node-mapnik) library, following the
    XYZ map tiling scheme. The "Observation Tile" methods accept nearly all the
    parameters of the observation search APIs, and will generate map tiles
    reflecting the same obseravtions returned by searches. These
    "Observation Tile" methods have corresponding
    [UTFGrid](https://github.com/mapbox/utfgrid-spec) JSON
    responses which return information needed to make interactive maps.

    iNaturalist Website: http://www.inaturalist.org/

    Open Souce Software: https://github.com/inaturalist/
  version: "1.1.0-alpha.1"
schemes:
  - http
  - https
basePath: /v1
produces:
  - application/json
tags:
  - name: Comments
    description: Search and fetch comments
  - name: Observations
    description: Search and fetch observations
  - name: Taxa
    description: Search and fetch taxa
  - name: Places
    description: Search and fetch places
  - name: Projects
    description: Search and fetch projects and members
  - name: Polygon Tiles
    description: Map tile images
  - name: Observation Tiles
    description: Map observation search results
  - name: UTFGrid
    description: JSON for observation tiles
paths:
  /comments:
    post:
      summary: Comment Create
      description: |
        Create a comment
      consumes:
       - application/json
      parameters:
        - name: body
          in: body
          description: Comment object
          schema:
            $ref: "#/definitions/PostComment"
      tags:
        - Comments
      security:
        - api_token: [ ]
  /comments/{id}:
    put:
      summary: Comment Update
      description: |
        Update a comment
      consumes:
       - application/json
      parameters:
        - $ref: "#/parameters/path_id"
        - name: body
          in: body
          description: Comment object
          schema:
            $ref: "#/definitions/PostComment"
      tags:
        - Comments
      security:
        - api_token: [ ]
    delete:
      summary: Comment Delete
      description: |
        Delete a comment
      consumes:
       - application/json
      parameters:
        - $ref: "#/parameters/path_id"
      tags:
        - Comments
      security:
        - api_token: [ ]
  /observations/{id}:
    get:
      summary: Observation Details
      description: |
        Given an ID, or an array of IDs in comma-delimited format, returns
        corresponding observations
      parameters:
        - $ref: "#/parameters/path_multi_id"
      tags:
        - Observations
      responses:
        200:
          description: |
            Returns an object with metadata and an array of observations
          schema:
            $ref: "#/definitions/ObservationsShowResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /observations:
    get:
      summary: Observation Search
      description: |
        Given zero to many of following parameters, returns observations
        matching the search criteria
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "index" } ) %>
      tags:
        - Observations
      responses:
        200:
          description: |
            Returns an object with metadata and an array of observations
          schema:
            $ref: "#/definitions/ObservationsResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /observations/identifiers:
    get:
      summary: Observation Identifiers
      description: |
        Given zero to many of following parameters, returns identifiers of
        observations matching the search criteria and the count of
        obseravations they have identified, ordered by count descending
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "search" } ) %>
      tags:
        - Observations
      responses:
        200:
          description: |
            Returns an object with metadata and an array of identifiers
          schema:
            $ref: "#/definitions/ObservationsIdentifiersResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /observations/observers:
    get:
      summary: Observation Observers
      description: |
        Given zero to many of following parameters, returns observers of
        observations matching the search criteria and the count of
        obseravations and distinct taxa of rank `species` they have observed
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "search" } ) %>
      tags:
        - Observations
      responses:
        200:
          description: |
            Returns an object with metadata and an array of observers
          schema:
            $ref: "#/definitions/ObservationsObserversResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /observations/species_counts:
    get:
      summary: Observation Species Counts
      description: |
        Given zero to many of following parameters, returns `leaf taxa`
        associated with observations matching the search criteria and the count of
        obseravations they are associated with, ordered by count descending.
        `Leaf taxa` are the leaves of the taxonomic tree containing only the
        taxa associated with observations matching the search criteria.
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "search" } ) %>
      tags:
        - Observations
      responses:
        200:
          description: |
            Returns an object with metadata and an array of taxa
          schema:
            $ref: "#/definitions/ObservationsSpeciesCountsResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /places/{id}:
    get:
      summary: Place Details
      description: |
        Given an ID, or an array of IDs in comma-delimited format, returns
        corresponding places
      parameters:
        - $ref: "#/parameters/path_multi_id"
      tags:
        - Places
      responses:
        200:
          description: |
            Returns an object with metadata and an results array of places
          schema:
            $ref: "#/definitions/PlacesResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /places/autocomplete:
    get:
      summary: Place Autocomplete
      description: |
        Given an string, returns places with names starting with the search term
      parameters:
        - $ref: "#/parameters/autocomplete_q"
        - name: order_by
          type: string
          in: query
          description: Sort field
          enum:
            - area
        - $ref: "#/parameters/per_page"
      tags:
        - Places
      responses:
        200:
          description: |
            Returns an object with metadata and an results array of places
          schema:
            $ref: "#/definitions/PlacesResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /places/nearby:
    get:
      summary: Nearby Places
      description: |
        Given an bounding box, and an optional name query, return `standard`
        iNaturalist curator approved and `community` non-curated places nearby
      parameters:
        - $ref: "#/parameters/nelat_required"
        - $ref: "#/parameters/nelng_required"
        - $ref: "#/parameters/swlat_required"
        - $ref: "#/parameters/swlng_required"
        - name: name
          in: query
          type: string
          description: Name must match this value
        - $ref: "#/parameters/per_page"
      tags:
        - Places
      responses:
        200:
          description: |
            Returns an object with metadata and an results object containing
            `standard` and `community` places
          schema:
            $ref: "#/definitions/NearbyPlacesResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /projects/{id}:
    get:
      summary: Project Details
      description: |
        Given an ID, or an array of IDs in comma-delimited format, returns
        corresponding projects
      parameters:
        - $ref: "#/parameters/path_multi_id"
      tags:
        - Projects
      responses:
        200:
          description: |
            Returns an object with metadata and an results array of projects
          schema:
            $ref: "#/definitions/ProjectsResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /projects/{id}/members:
    get:
      summary: Project Members
      description: |
        Given an ID, return members of the project
      parameters:
        - $ref: "#/parameters/path_id"
        - name: role
          type: string
          in: query
          description: Membership role
          enum:
            - curator
            - manager
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/per_page"
      tags:
        - Projects
      responses:
        200:
          description: |
            Returns an object with metadata and an results array of projects
          schema:
            $ref: "#/definitions/ProjectMembersResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /projects/autocomplete:
    get:
      summary: Project Autocomplete
      description: |
        Given an string, returns projects with titles starting with the search term
      parameters:
        - $ref: "#/parameters/autocomplete_q"
        - $ref: "#/parameters/per_page"
      tags:
        - Projects
      responses:
        200:
          description: |
            Returns an object with metadata and an results array of places
          schema:
            $ref: "#/definitions/ProjectsResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /taxa/{id}:
    get:
      summary: Taxon Details
      description: |
        Given an ID, or an array of IDs in comma-delimited format, returns
        corresponding taxa
      parameters:
        - $ref: "#/parameters/path_multi_id"
      tags:
        - Taxa
      responses:
        200:
          description: |
            Returns an object with metadata and a results array of taxa
          schema:
            $ref: "#/definitions/TaxaShowResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /taxa/autocomplete:
    get:
      summary: Taxon Autocomplete
      description: |
        Given an string, returns taxa with names starting with the search term
      parameters:
        - $ref: "#/parameters/autocomplete_q"
        - name: is_active
          type: boolean
          in: query
          description: Taxon is `active`
        - $ref: "#/parameters/per_page"
        - $ref: "#/parameters/locale"
        - $ref: "#/parameters/preferred_place_id"
      tags:
        - Taxa
      responses:
        200:
          description: |
            Returns an object with search metadata and a results array of taxa
          schema:
            $ref: "#/definitions/TaxaAutocompleteResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /colored_heatmap/{zoom}/{x}/{y}.png:
    get:
      summary: Colored Heatmap Tiles
      description: |
        Given zero to many of following parameters, returns a PNG image
        representing the matching observations within a map tile, following
        the XYZ tiling scheme
      produces:
        - image/png
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "tiles" } ) %>
      tags:
        - Observation Tiles
      responses:
        200:
          description: |
            Returns a PNG map tile image
  /colored_heatmap/{zoom}/{x}/{y}.grid.json:
    get:
      summary: Colored Heatmap Tiles UTFGrid
      description: |
        Given zero to many of following parameters, returns a JSON file
        following the UTFGrid spec, representing observations matching
        the search criteria
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "tiles" } ) %>
      tags:
        - UTFGrid
      responses:
        200:
          description: |
            Returns a UTFGrid
          schema:
            $ref: "#/definitions/UTFGridResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /heatmap/{zoom}/{x}/{y}.png:
    get:
      summary: Heatmap Tiles
      description: |
        Given zero to many of following parameters, returns a PNG image
        representing the matching observations within a map tile, following
        the XYZ tiling scheme
      produces:
        - image/png
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "tiles" } ) %>
      tags:
        - Observation Tiles
      responses:
        200:
          description: |
            Returns a PNG map tile image
  /heatmap/{zoom}/{x}/{y}.grid.json:
    get:
      summary: Heatmap Tiles UTFGrid
      description: |
        Given zero to many of following parameters, returns a JSON file
        following the UTFGrid spec, representing observations matching
        the search criteria
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "tiles" } ) %>
      tags:
        - UTFGrid
      responses:
        200:
          description: |
            Returns a UTFGrid
          schema:
            $ref: "#/definitions/UTFGridResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /points/{zoom}/{x}/{y}.png:
    get:
      summary: Points Tiles
      description: |
        Given zero to many of following parameters, returns a PNG image
        representing the matching observations within a map tile, following
        the XYZ tiling scheme
      produces:
        - image/png
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "tiles" } ) %>
      tags:
        - Observation Tiles
      responses:
        200:
          description: |
            Returns a PNG map tile image
  /points/{zoom}/{x}/{y}.grid.json:
    get:
      summary: Points Tiles UTFGrid
      description: |
        Given zero to many of following parameters, returns a JSON file
        following the UTFGrid spec, representing observations matching
        the search criteria
      parameters:
        <%- include( "_observation_search_params_v1.yml.ejs", { type: "tiles" } ) %>
      tags:
        - UTFGrid
      responses:
        200:
          description: |
            Returns a UTFGrid
          schema:
            $ref: "#/definitions/UTFGridResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /places/{place_id}/{zoom}/{x}/{y}.png:
    get:
      summary: Place Tiles
      description: |
        Returns a PNG map tile representing the boundary of this place,
        following the XYZ tiling scheme
      produces:
        - image/png
      parameters:
        - $ref: "#/parameters/path_place_id"
        - $ref: "#/parameters/zoom"
        - $ref: "#/parameters/x"
        - $ref: "#/parameters/y"
        - $ref: "#/parameters/ttl"
      tags:
        - Polygon Tiles
      responses:
        200:
          description: |
            Returns a PNG map tile image
  /taxon_places/{taxon_id}/{zoom}/{x}/{y}.png:
    get:
      summary: Taxon Place Tiles
      description: |
        Returns a PNG map tile representing the boundaries of places this taxon
        is known to occur, following the XYZ tiling scheme
      produces:
        - image/png
      parameters:
        - $ref: "#/parameters/path_taxon_id"
        - $ref: "#/parameters/zoom"
        - $ref: "#/parameters/x"
        - $ref: "#/parameters/y"
        - $ref: "#/parameters/ttl"
      tags:
        - Polygon Tiles
      responses:
        200:
          description: |
            Returns a PNG map tile image
  /taxon_ranges/{taxon_id}/{zoom}/{x}/{y}.png:
    get:
      summary: Taxon Range Tiles
      description: |
        Returns a PNG map tile representing the range of this taxon, following
        the XYZ tiling scheme
      produces:
        - image/png
      parameters:
        - $ref: "#/parameters/path_taxon_id"
        - $ref: "#/parameters/zoom"
        - $ref: "#/parameters/x"
        - $ref: "#/parameters/y"
        - $ref: "#/parameters/tile_color"
        - $ref: "#/parameters/ttl"
      tags:
        - Polygon Tiles
      responses:
        200:
          description: |
            Returns a PNG map tile image
parameters:
  # Obs Search Boolean Params
  captive:
    name: captive
    type: boolean
    in: query
    description: Captive or cultivated observations
  endemic:
    name: endemic
    type: boolean
    in: query
    description: Observations whose taxa are endemic to their location
  geo:
    name: geo
    type: boolean
    in: query
    description: Observations that are georeferenced
  id_please:
    name: id_please
    type: boolean
    in: query
    description: Observations with the `ID, Please!` flag
  identified:
    name: identified
    type: boolean
    in: query
    description: Observations that have community identifications
  introduced:
    name: introduced
    type: boolean
    in: query
    description: |
      Observations whose taxa are introduced in their location
  mappable:
    name: mappable
    type: boolean
    in: query
    description: Observations that show on map tiles
  native:
    name: native
    type: boolean
    in: query
    description: Observations whose taxa are native to their location
  out_of_range:
    name: out_of_range
    type: boolean
    in: query
    description: Observations whose taxa are outside their known ranges
  pcid:
    name: pcid
    type: boolean
    in: query
    description: |
      Observations whose identififed by the curator of a project. If
      the `project_id` parameter is also specified, this will only consider
      observations identified by curators of the specified project(s)
  photos:
    name: photos
    type: boolean
    in: query
    description: Observations with photos
  popular:
    name: popular
    type: boolean
    in: query
    description: |
      Observations that have been favorited by at least one user
  sounds:
    name: sounds
    type: boolean
    in: query
    description: Observations with sounds
  threatened:
    name: threatened
    type: boolean
    in: query
    description: |
      Observations whose taxa are threatened in their location
  verifiable:
    name: verifiable
    type: boolean
    in: query
    description: |
      Observations with a `quality_grade` of either `needs_id` or
      `research`. Equivalent to `quality_grade=needs_id,research`
  # Obs Search Multi-Value Params
  day:
    name: day
    type: array
    items:
      type: string
    in: query
    minimum: 1
    maximum: 31
    description: Must be observed within this day of the month
  id:
    name: id
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: Must have this ID
  license:
    name: license
    type: array
    items:
      type: string
    in: query
    description: Observation must have this license
    enum:
      - cc-by
      - cc-by-nc
      - cc-by-nd
      - cc-by-sa
      - cc-by-nc-nd
      - cc-by-nc-sa
      - cc0
  month:
    name: month
    type: array
    items:
      type: string
    in: query
    minimum: 1
    maximum: 12
    description: Must be observed within this month
  photo_license:
    name: photo_license
    type: array
    items:
      type: string
    in: query
    description: Must have at least one photo with this license
    enum:
      - cc-by
      - cc-by-nc
      - cc-by-nd
      - cc-by-sa
      - cc-by-nc-nd
      - cc-by-nc-sa
      - cc0
  place_id:
    name: place_id
    type: array
    items:
      type: integer
    in: query
    description: Must be observed within the place with this ID
  project_id:
    name: project_id
    type: array
    items:
      type: string
    in: query
    description: Must be added to the project this ID or slug
  rank:
    name: rank
    type: array
    items:
      type: string
    in: query
    description: Taxon must have this rank
    enum:
      - root
      - kingdom
      - phylum
      - subphylum
      - superclass
      - class
      - subclass
      - superorder
      - order
      - suborder
      - infraorder
      - superfamily
      - epifamily
      - family
      - subfamily
      - supertribe
      - tribe
      - subtribe
      - genus
      - genushybrid
      - species
      - hybrid
      - subspecies
      - variety
      - form
  site_id:
    name: site_id
    type: array
    items:
      type: string
    in: query
    description: |
      Must be affiliated with the iNaturalist network website with this ID
  sound_license:
    name: sound_license
    type: array
    items:
      type: string
    in: query
    description: Must have at least one sound with this license
    enum:
      - cc-by
      - cc-by-nc
      - cc-by-nd
      - cc-by-sa
      - cc-by-nc-nd
      - cc-by-nc-sa
      - cc0
  taxon_id:
    name: taxon_id
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: Taxon must have this ID
  taxon_name:
    name: taxon_name
    type: array
    items:
      type: string
    in: query
    description: |
      Taxon must have a scientific or common name matching this string
  user_id:
    name: user_id
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: User must have this ID or login
  user_login:
    name: user_login
    type: array
    items:
      type: string
    in: query
    description: User must have this login
  year:
    name: year
    type: array
    items:
      type: string
    in: query
    minimum: 1
    description: Must be observed within this year
  # Remaining Obs Search Params
  apply_project_rules_for:
    name: apply_project_rules_for
    type: string
    in: query
    description: Must match the rules of the project with this ID or slug
  created_d1:
    name: created_d1
    type: string
    format: date-time
    in: query
    description: Must be created at or after this time
  created_d2:
    name: created_d2
    type: string
    format: date-time
    in: query
    description: Must be created at or before this time
  created_on:
    name: created_on
    type: string
    format: date
    in: query
    description: Must be created on this date
  cs:
    name: cs
    type: string
    in: query
    description: |
      Taxon must have this conservation status code. If
      the `place_id` parameter is also specified, this will only consider
      statuses specific to that place
  csa:
    name: csa
    type: string
    in: query
    description: |
      Taxon must have a conservation status from this authority. If
      the `place_id` parameter is also specified, this will only consider
      statuses specific to that place
  csi:
    name: csi
    type: array
    items:
      type: string
    in: query
    description: |
      Taxon must have this IUCN conservation status. If
      the `place_id` parameter is also specified, this will only consider
      statuses specific to that place
    enum:
      - LC
      - NT
      - VU
      - EN
      - CR
      - EW
      - EX
  d1:
    name: d1
    type: string
    format: date
    in: query
    description: Must be observed on or after this date
  d2:
    name: d2
    type: string
    format: date
    in: query
    description: Must be observed on or before this date
  geoprivacy:
    name: geoprivacy
    type: array
    items:
      type: string
    in: query
    description: Must have this geoprivacy setting
    enum:
      - obscured
      - obscured_private
      - open
      - private
  hrank:
    name: hrank
    type: string
    in: query
    description: Taxon must have this rank or lower
    enum:
      - root
      - kingdom
      - phylum
      - subphylum
      - superclass
      - class
      - subclass
      - superorder
      - order
      - suborder
      - infraorder
      - superfamily
      - epifamily
      - family
      - subfamily
      - supertribe
      - tribe
      - subtribe
      - genus
      - genushybrid
      - species
      - hybrid
      - subspecies
      - variety
      - form
  iconic_taxa:
    name: iconic_taxa
    type: array
    items:
      type: string
    in: query
    description: Taxon must by within this iconic taxon
    enum:
      - Actinopterygii
      - Animalia
      - Amphibia
      - Arachnida
      - Aves
      - Chromista
      - Fungi
      - Insecta
      - Mammalia
      - Mollusca
      - Reptilia
      - Plantae
      - Protozoa
      - unknown
  id_above:
    name: id_above
    type: string
    in: query
    description: Must have an ID above this value
  identifications:
    name: identifications
    type: string
    in: query
    description: Identifications must meet these criteria
    enum:
      - most_agree
      - most_disagree
      - some_agree
  lat:
    name: lat
    type: number
    format: double
    in: query
    description: |
      Must be within a {`radius`} kilometer circle around this lat/lng
      (*lat, *lng, radius)
  list_id:
    name: list_id
    type: integer
    in: query
    description: Taxon must be in the list with this ID
  lng:
    name: lng
    type: number
    format: double
    in: query
    description: |
      Must be within a {`radius`} kilometer circle around this lat/lng
      (*lat, *lng, radius)
  lrank:
    name: lrank
    type: string
    in: query
    description: Taxon must have this rank or higher
    enum:
      - root
      - kingdom
      - phylum
      - subphylum
      - superclass
      - class
      - subclass
      - superorder
      - order
      - suborder
      - infraorder
      - superfamily
      - epifamily
      - family
      - subfamily
      - supertribe
      - tribe
      - subtribe
      - genus
      - genushybrid
      - species
      - hybrid
      - subspecies
      - variety
      - form
  nelat:
    name: nelat
    type: number
    format: double
    in: query
    description: |
      Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
  nelng:
    name: nelng
    type: number
    format: double
    in: query
    description: |
      Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
  swlat:
    name: swlat
    type: number
    format: double
    in: query
    description: |
      Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
  swlng:
    name: swlng
    type: number
    format: double
    in: query
    description: |
      Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
  not_in_project:
    name: not_in_project
    type: string
    in: query
    description: Must not be in the project with this ID or slug
  not_matching_project_rules_for:
    name: not_matching_project_rules_for
    type: string
    in: query
    description: Must not match the rules of the project with this ID or slug
  observed_on:
    name: observed_on
    type: string
    format: date
    in: query
    description: Must be observed on this date
  order:
    name: order
    type: string
    in: query
    description: Sort order
    default: desc
    enum:
      - desc
      - asc
  order_by:
    name: order_by
    type: string
    in: query
    description: Sort field
    default: created_at
    enum:
      - observed_on
      - species_guess
      - votes
      - id
      - created_at
  page:
    name: page
    type: string
    in: query
    description: Pagination `page` number
  per_page:
    name: per_page
    type: string
    in: query
    description: Number of results to return in a `page`
  q:
    name: q
    type: string
    in: query
    description: Search obseration properties. Can be combined with `search_on`
  quality_grade:
    name: quality_grade
    type: string
    in: query
    description: Must have this quality grade
    enum:
      - casual
      - needs_id
      - research
  radius:
    name: radius
    type: string
    in: query
    description: |
      Must be within a {`radius`} kilometer circle around this lat/lng
      (*lat, *lng, radius)
  search_on:
    name: search_on
    type: string
    in: query
    description: |
      Properties to search on, when combined with `q`.
      Seaches across all properties by default
    enum:
      - names
      - tags
      - description
      - place
  ttl:
    name: ttl
    type: string
    in: query
    description: |
      Set the `Cache-Control` HTTP header with this value as `max-age`, in
      seconds. This means subsequent identical requests will be cached on
      iNaturalist servers, and commonly within web browsers
  updated_since:
    name: updated_since
    type: string
    in: query
    description: Must be updated since this time
  viewer_id:
    name: viewer_id
    type: string
    in: query
    description: See `reviewed`
  reviewed:
    name: reviewed
    type: boolean
    in: query
    description: |
      Observations have been reviewed by the user with ID equal to
      the value of the `viewer_id` parameter
  path_id:
    name: id
    in: path
    required: true
    type: integer
    description: ID of the record
  path_multi_id:
    name: id
    in: path
    required: true
    type: array
    items:
      type: integer
    description: Must have this ID
  autocomplete_q:
    name: q
    type: string
    in: query
    required: true
    description: Name must begin with this value
  # Nearby Places
  nelat_required:
    name: nelat
    type: number
    format: double
    in: query
    required: true
    description: |
      Must be nearby this bounding box (*nelat, *nelng, *swlat, *swlng)
  nelng_required:
    name: nelng
    type: number
    format: double
    in: query
    required: true
    description: |
      Must be nearby this bounding box (*nelat, *nelng, *swlat, *swlng)
  swlat_required:
    name: swlat
    type: number
    format: double
    in: query
    required: true
    description: |
      Must be nearby this bounding box (*nelat, *nelng, *swlat, *swlng)
  swlng_required:
    name: swlng
    type: number
    format: double
    in: query
    required: true
    description: |
      Must be nearby this bounding box (*nelat, *nelng, *swlat, *swlng)
  # Locale Params
  locale:
    name: locale
    type: string
    in: query
    description: |
      Locale preference for taxon common names
  preferred_place_id:
    name: preferred_place_id
    type: integer
    in: query
    description: |
      Place preference for regional taxon common names
  # Tile Params
  zoom:
    name: zoom
    type: integer
    in: path
    required: true
    minimum: 0
    maximum: 21
    description: Zoom level. Z coordinate in the XYZ tiling scheme
  x:
    name: x
    type: integer
    in: path
    required: true
    minimum: 0
    description: X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
  y:
    name: y
    type: integer
    in: path
    required: true
    minimum: 0
    description: Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
  path_place_id:
    name: place_id
    type: integer
    in: path
    required: true
    description: Place ID
  path_taxon_id:
    name: taxon_id
    type: integer
    in: path
    required: true
    description: Taxon ID
  tile_color:
    name: color
    type: string
    in: query
    description: |
      Primary color to use in tile creation. Accepts common colors by string
      (e.g. `color=blue`), and accepts escaped color HEX codes
      (e.g. `color=%2386a91c`)
securityDefinitions:
  api_token:
    type: apiKey
    name: Authorization
    in: header
definitions:
  AutocompleteTaxon:
    allOf:
      - $ref: "#/definitions/CoreTaxon"
      - type: object
        properties:
          default_photo:
            $ref: "#/definitions/TaxonPhoto"
          matched_term:
            type: string
          observations_count:
            type: integer
  BaseResponse:
    type: object
    properties:
      total_results:
        type: integer
      page:
        type: integer
      per_page:
        type: integer
  Color:
    type: object
    properties:
      id:
        type: integer
      value:
        type: string
  Comment:
    type: object
    properties:
      id:
        type: integer
      created_at:
        type: string
        format: date-time
      created_at_details:
        $ref: "#/definitions/DateDetails"
      user:
        $ref: "#/definitions/User"
  PostComment:
    type: object
    properties:
      comment:
        type: object
        properties:
          parent_type:
            type: string
            enum:
              - Observation
              - ListedTaxon
              - AssessmentSection
              - ObservationField
              - Post
              - TaxonChange
          parent_id:
            type: integer
          body:
            type: string
  ConservationStatus:
    type: object
    properties:
      place_id:
        type: integer
      place:
        $ref: "#/definitions/CorePlace"
      status:
        type: string
  CorePlace:
    type: object
    properties:
      id:
        type: integer
      display_name:
        type: string
  CoreTaxon:
    type: object
    properties:
      id:
        type: integer
      iconic_taxon_id:
        type: integer
      iconic_taxon_name:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      preferred_common_name:
        type: string
      rank:
        type: string
      rank_level:
        type: integer
  DateDetails:
    type: object
    properties:
      date:
        type: string
        format: date
      day:
        type: integer
      hour:
        type: integer
      month:
        type: integer
      week:
        type: integer
      year:
        type: integer
  EstablishmentMeans:
    type: object
    properties:
      establishment_means:
        type: string
      place:
        $ref: "#/definitions/CorePlace"
  Fave:
    type: object
    properties:
      id:
        type: integer
      votable_id:
        type: integer
      created_at: 
        type: string
        format: date-time
      user: 
        $ref: "#/definitions/User"
  FieldValue:
    type: object
    properties:
      name:
        type: string
      value:
        type: string
  Identification:
    type: object
    properties:
      id:
        type: integer
      observation_id:
        type: integer
      body:
        type: string
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      current:
        type: boolean
      taxon:
        $ref: "#/definitions/ObservationTaxon"
  NonOwnerIdentification:
    type: object
    properties:
      id:
        type: integer
      body:
        type: string
      created_at:
        type: string
        format: date-time
      created_at_details:
        $ref: "#/definitions/DateDetails"
      user:
        $ref: "#/definitions/User"
  Observation:
    type: object
    properties:
      id:
        type: integer
      cached_votes_total:
        type: integer
      captive:
        type: boolean
      comments:
        type: array
        items:
          $ref: "#/definitions/Comment"
      comments_count:
        type: integer
      created_at:
        type: string
        format: date-time
      created_at_details:
        $ref: "#/definitions/DateDetails"
      created_time_zone:
        type: string
      description:
        type: string
      faves_count:
        type: integer
      geojson:
        $ref: "#/definitions/PointGeoJson"
      geoprivacy:
        type: string
      id_please:
        type: boolean
      identifications_count:
        type: integer
      identifications_most_agree:
        type: integer
      identifications_most_disagree:
        type: integer
      identifications_some_agree:
        type: integer
      license_code:
        type: string
      location:
        type: string
        description: in the format "lat,lng"
      mappable:
        type: boolean
      non_owner_ids:
        type: array
        items:
          $ref: "#/definitions/NonOwnerIdentification"
      num_identification_agreements:
        type: integer
      num_identification_disagreements:
        type: integer
      obscured:
        type: boolean
      observed_on:
        type: string
        format: date-time
      observed_on_details:
        $ref: "#/definitions/DateDetails"
      observed_on_string:
        type: string
      observed_time_zone:
        type: string
      ofvs:
        type: array
        items:
          $ref: "#/definitions/FieldValue"
      out_of_range:
        type: boolean
      photos:
        type: array
        items:
          $ref: "#/definitions/Photo"
      place_guess:
        type: integer
      place_ids:
        type: array
        items:
          type: integer
      project_ids:
        type: array
        items:
          type: integer
      project_ids_with_curator_id:
        type: array
        items:
          type: integer
      project_ids_without_curator_id:
        type: array
        items:
          type: integer
      quality_grade:
        type: integer
      reviewed_by:
        type: array
        items:
          type: integer
      site_id:
        type: integer
      sounds:
        type: array
        items:
          $ref: "#/definitions/Sound"
      species_guess:
        type: string
      tags:
        type: array
        items:
          type: string
      taxon:
        $ref: "#/definitions/ObservationTaxon"
      time_observed_at:
        type: string
        format: date-time
      time_zone_offset:
        type: string
      updated_at:
        type: string
        format: date-time
      uri:
        type: string
      user:
        $ref: "#/definitions/User"
      verifiable:
        type: boolean
  ObservationTaxon:
    allOf:
      - $ref: "#/definitions/CoreTaxon"
      - type: object
        properties:
          ancestor_ids:
            type: array
            items:
              type: integer
          ancestry:
            type: string
          conservation_status:
            $ref: "#/definitions/RawConservationStatus"
          endemic:
            type: boolean
          establishment_means:
            $ref: "#/definitions/EstablishmentMeans"
          introduced:
            type: string
          native:
           type: string
          threatened:
            type: string
  Photo:
    type: object
    properties:
      id:
        type: integer
      attribution:
        type: string
      license_code:
        type: string
      url:
        type: string
  PointGeoJson:
    type: object
    properties:
      type:
        type: string
      coordinates:
        type: array
        description: an array of [long, lat]
        items:
          type: string
  PolygonGeoJson:
    type: object
    properties:
      type:
        type: string
      coordinates:
        type: array
        items:
          type: array
          items:
            type: array
            description: an array of [long, lat]
            items:
              type: number
              format: double
  Project:
    type: object
    properties:
      id:
        type: integer
      title:
        type: string
      description:
        type: string
      slug:
        type: string
  ProjectMember:
    type: object
    properties:
      id:
        type: integer
      project_id:
        type: integer
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      role:
        type: string
        enum:
          - curator
          - manager
      observations_count:
        type: integer
      taxa_count:
        type: integer
      user:
        $ref: "#/definitions/User"
  RawConservationStatus:
    type: object
    properties:
      place_id:
        type: integer
      source_id:
        type: integer
      authority:
        type: string
      status:
        type: string
      geoprivacy:
        type: string
  ShowObservation:
    allOf:
      - $ref: "#/definitions/Observation"
      - type: object
        properties:
          identifications:
            $ref: "#/definitions/Identification"
          faves:
            $ref: "#/definitions/Fave"
  ShowPlace:
    allOf:
      - $ref: "#/definitions/CorePlace"
      - type: object
        properties:
          admin_level:
            type: integer
          ancestor_place_ids:
            type: array
            items:
              type: integer
          bbox_area:
            type: number
            format: double
          geometry_geojson:
            $ref: "#/definitions/PolygonGeoJson"
          location:
            type: string
            description: in the format "lat,lng"
          name:
            type: string
          place_type:
            type: integer
  ShowTaxon:
    allOf:
      - $ref: "#/definitions/CoreTaxon"
      - type: object
        properties:
          colors:
            type: array
            items:
              $ref: "#/definitions/Color"
          conservation_status:
            $ref: "#/definitions/ConservationStatus"
          default_photo:
            $ref: "#/definitions/TaxonPhoto"
          establishment_means:
            $ref: "#/definitions/EstablishmentMeans"
          observations_count:
            type: integer
          preferred_establishment_means:
            type: string
  Sound:
    type: object
    properties:
      id:
        type: integer
      attribution:
        type: string
      license_code:
        type: string
  TaxonPhoto:
    allOf:
      - $ref: "#/definitions/Photo"
      - type: object
        properties:
          medium_url:
            type: string
          square_url:
            type: string
  User:
    type: object
    properties:
      id:
        type: integer
      icon_content_type:
        type: string
      icon_file_name:
        type: string
      icon_url:
        type: string
      login:
        type: string
      name:
        type: string
  # Responses
  NearbyPlacesResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: object
            properties:
              standard:
                type: array
                items:
                  $ref: "#/definitions/ShowPlace"
              community:
                type: array
                items:
                  $ref: "#/definitions/ShowPlace"
  ObservationsResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/Observation"
  ObservationsShowResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/ShowObservation"
  ObservationsIdentifiersResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              type: object
              properties:
                count:
                  type: integer
                user:
                  $ref: "#/definitions/User"
  ObservationsObserversResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              type: object
              properties:
                observation_count:
                  type: integer
                species_count:
                  type: integer
                user:
                  $ref: "#/definitions/User"
  ObservationsSpeciesCountsResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              type: object
              properties:
                count:
                  type: integer
                taxon:
                  $ref: "#/definitions/ShowTaxon"
  PlacesResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/ShowPlace"
  ProjectMembersResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/ProjectMember"
  ProjectsResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/Project"
  TaxaAutocompleteResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/AutocompleteTaxon"
  TaxaShowResponse:
    allOf:
      - $ref: "#/definitions/BaseResponse"
      - required:
        - results
        properties:
          results:
            type: array
            items:
              $ref: "#/definitions/ShowTaxon"
  UTFGridResponse:
    properties:
      grid:
        type: array
        items:
          type: string
      keys:
        type: array
        items:
          type: string
      data:
        type: object
  # Error
  Error:
    type: object
    properties:
      code:
        type: integer
      message:
        type: string
